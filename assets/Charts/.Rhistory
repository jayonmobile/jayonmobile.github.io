hmmRets <- na.fill(hmmRets, fill = 0.00)
plot(cumsum(hmmRets))
hmmRets <- LogReturns * lag(HMMpost$state == bullState) - LogReturns * lag(HMMpost$state == bearState)
a<-LogReturns * lag(HMMpost$state == bullState) - LogReturns * lag(HMMpost$state == bearState)
View(HMMpost)
View(LogReturns)
View(summaryMat)
View(LogReturns)
View(HMMpost)
a<-lag(HMMpost$state == bullState)
View(LogReturns)
a<-LogReturns$Close
a<-LogReturns * lag(HMMpost$state == bullState)
View(LogReturns)
a<-lag(HMMpost$state == bullState)
library(depmixS4)
library(readr)
library(quantmod)
library(PerformanceAnalytics)
#TSData<-read_csv("EURUSD1d.csv", col_types=cols("Open Timestamp" = col_date("%Y.%m.%d %H:%M:%S")))
fileName <- "HSI1hr.csv"
dateTimeFormate <- "%d/%m/%Y %H:%M" #"%d/%m/%Y %H:%M"
TSData<-read_csv(fileName, col_types=cols("Dates" = col_datetime(dateTimeFormate)))
TSData<-xts(TSData[,-1],order.by = as.POSIXct(TSData$Dates, format = dateTimeFormate))
multiplier <- 10000
TSData$Open <- TSData$Open*multiplier
TSData$High <- TSData$High*multiplier
TSData$Low <- TSData$Low*multiplier
TSData$Close <- TSData$Close*multiplier
ATRindicator<-ATR(TSData[,2:4],n=14) #calculate the indicator
ATR<-ATRindicator[,2] #grab just the ATR
RSI <- RSI(TSData$Close, n = 14)
MACDIndicator <- MACD(TSData$Close)
MACD <- MACDIndicator[,1]
#k<-ifelse(RSI<30,"os",ifelse(RSI>70,"ob","n"))
#LogReturns <- log(TSData$Close) - log(TSData$Open)
LogReturns <- ((TSData$Close - TSData$Open)/TSData$Open)*100
ModelData<-data.frame(LogReturns,ATR, RSI, MACD) #create the data frame for our HMM model
#ModelData<-ModelData[-c(1:14),]
colnames(ModelData)<-c("LogReturns","ATR", "RSI", "MACD")
head(ModelData)
set.seed(1)
#HMM<-depmix(list(LogReturns~1,ATR~1, RSI~1, MACD~1),data=ModelData,nstates=3,family=list(gaussian(),gaussian(),gaussian(), gaussian()))
#HMM<-depmix(list(ATR~1, RSI~1, MACD~1, k~1),data=ModelData,nstates=3,family=list(gaussian(),gaussian(),gaussian(), multinomial()), transition = ~LogReturns)
HMM<-depmix(list(LogReturns~1, ATR~1, RSI~1, MACD~1),data=ModelData,nstates=3,family=list(gaussian(), gaussian(),gaussian(),gaussian()))
HMMfit<-fit(HMM, verbose = FALSE) #fit our model to the data set
print(HMMfit)
summary(HMMfit)
HMMpost<-posterior(HMMfit) #find the posterior odds for each state over our data set
head(HMMpost)
summary(HMMpost)
layout(1:2)
plot(LogReturns, type='l', main='Regime Detection', xlab='', ylab='Price')
matplot(HMMpost[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='bottomleft', c('Regime #1','Regime #2', 'Regime #3'), fill=1:3, bty='n')
plot(LogReturns, type = "l")
plot(ATR, type = "l")
plot(RSI, type = "l")
plot(MACD, type = "l")
plot(TSData$Close, type = "l")
plot(HMMpost$state, type = "l")
plot(HMMpost$S1, type = "l")
plot(HMMpost$S2, type = "l")
#plot(HMMpost$S3, type = "l")
hist(ATR)
hist(RSI)
hist(MACD)
summaryMat <- data.frame(summary(HMMfit))
colnames(summaryMat) <- c("Intercept", "SD")
bullState <- which.max(summaryMat$Intercept) #which(summaryMat$Intercept > 0)
bearState <- which.min(summaryMat$Intercept) #which(summaryMat$Intercept < 0.01)
#hmmRets <- tail(LogReturns, 994) * lag(HMMpost$state == bullState) - tail(LogReturns, 994) * lag(HMMpost$state == bearState)
hmmRets <- LogReturns * lag(HMMpost$state == bullState) - LogReturns * lag(HMMpost$state == bearState)
#hmmRets <- hmmRets["2015/2017"]
hmmRets <- na.fill(hmmRets, fill = 0.00)
plot(cumsum(hmmRets))
View(hmmRets)
a<-cumsum(hmmRets)
plot(a)
View(a)
plot(a$Close)
a[1]<-0
plot(a)
as.ts(a)
plot(a)
View(a)
library(xts)
plot(a)
library(devtools)
devtools::install_github("braverock/blotter")
library(quantmod)
getOptionChain("AAPL")
getOptionChain("AAPL", null)
getOptionChain("AAPL", NULL)
getOptionChain("IBM", NULL)
a<-getOptionChain("IBM", NULL)
View(a)
library(flexdashboard)
install.packages("flexdashboard")
library(flexdashboard)
library(Rblpapi)
install.packages("Rblpapi")
library(flexdashboard)
library(Rblpapi)
library(TTR)
library(DT)
library(rbokeh)
library(highcharter)
library(xts)
library(quantmod)
library(sqldf)
install.packages("sqldf")
library(flexdashboard)
library(Rblpapi)
library(TTR)
library(DT)
library(rbokeh)
library(highcharter)
library(xts)
library(quantmod)
library(sqldf)
con <- blpConnect()
# functions
GetHistTS <- function(ticker = "", lookback = 2000, period = "DAILY")
{
fromDays <- lookback
opt <- c("periodicitySelection"=period)
histData <- bdh(ticker, c("PX_LAST","PX_OPEN", "PX_HIGH", "PX_LOW"), start.date=Sys.Date()- fromDays, options=opt)
tm <- strptime(paste(histData[,"date"]), format="%Y-%m-%d")
ts <- xts(x=histData[,c("PX_OPEN","PX_HIGH","PX_LOW","PX_LAST")],order.by=tm)
colnames(ts) <- c("Open","High","Low","Close")
return(ts)
}
GetStaticTSChart <- function(ts)
{
h <- chartSeries(ts, theme="white", name=ticker,
TA="addBBands();addRSI();addSMA(20, col='blue');addMACD();
addSMA(50, col='red');addSMA(100, col='black')")
return(h)
}
ticker = "SPX Index"
ts <- GetHistTS(ticker, lookback = 1000, period = "WEEKLY")
h <- GetStaticTSChart(ts)
ticker = "SPX Index"
ts <- GetHistTS(ticker, lookback = 360, period = "DAILY")
h <- GetStaticTSChart(ts)
# SPX Sector
tickerList <- c("S5INFT INDEX", "S5COND INDEX", "S5FINL INDEX", "S5HLTH INDEX", "S5INDU INDEX", "S5MATR INDEX", "S5CONS INDEX", "S5TELS INDEX", "S5ENRS INDEX", "S5RLST INDEX", "S5UTIL INDEX")
fieldList <- c("short_name", "PX_LAST", "chg_pct_1d", "chg_pct_5d", "chg_pct_1m", "chg_pct_3m", "chg_pct_ytd")
d <- bdp(tickerList, fieldList)
datatable(d, class = 'cell-border stripe', options = list(pageLength = 20)) %>%
formatRound(fieldList, digits=2)
# SPX Sector
tickerList <- c("S5INFT INDEX", "S5COND INDEX", "S5FINL INDEX", "S5HLTH INDEX", "S5INDU INDEX", "S5MATR INDEX", "S5CONS INDEX", "S5TELS INDEX", "S5ENRS INDEX", "S5RLST INDEX", "S5UTIL INDEX")
fieldList <- c("short_name", "PCT_MEMB_PX_GT_10D_MOV_AVG", "PCT_MEMB_PX_GT_50D_MOV_AVG", "PCT_MEMB_ABOVE_MOV_AVG_200D", "PCT_MEMB_WITH_14D_RSI_GT_70", "PCT_MEMB_WITH_14D_RSI_LT_30", "PCT_MEM_MACD_BUY_SIGNAL_LST_10D", "PCT_MEM_MACD_SL_SIGNAL_LST_10D")
d <- bdp(tickerList, fieldList)
datatable(d, class = 'cell-border stripe', options = list(pageLength = 20)) %>%
formatRound(fieldList, digits=2)
hchart(d, type = "bar", hcaes(x = d$short_name, y = d$chg_pct_1d))
# SPX Sector
tickerList <- c("S5INFT INDEX", "S5COND INDEX", "S5FINL INDEX", "S5HLTH INDEX", "S5INDU INDEX", "S5MATR INDEX", "S5CONS INDEX", "S5TELS INDEX", "S5ENRS INDEX", "S5RLST INDEX", "S5UTIL INDEX")
fieldList <- c("short_name", "PX_LAST", "chg_pct_1d", "chg_pct_5d", "chg_pct_1m", "chg_pct_3m", "chg_pct_ytd")
d <- bdp(tickerList, fieldList)
datatable(d, class = 'cell-border stripe', options = list(pageLength = 20)) %>%
formatRound(fieldList, digits=2)
# SPX Sector
tickerList <- c("S5INFT INDEX", "S5COND INDEX", "S5FINL INDEX", "S5HLTH INDEX", "S5INDU INDEX", "S5MATR INDEX", "S5CONS INDEX", "S5TELS INDEX", "S5ENRS INDEX", "S5RLST INDEX", "S5UTIL INDEX")
fieldList <- c("short_name", "PCT_MEMB_PX_GT_10D_MOV_AVG", "PCT_MEMB_PX_GT_50D_MOV_AVG", "PCT_MEMB_ABOVE_MOV_AVG_200D", "PCT_MEMB_WITH_14D_RSI_GT_70", "PCT_MEMB_WITH_14D_RSI_LT_30", "PCT_MEM_MACD_BUY_SIGNAL_LST_10D", "PCT_MEM_MACD_SL_SIGNAL_LST_10D")
b <- bdp(tickerList, fieldList)
datatable(b, class = 'cell-border stripe', options = list(pageLength = 20)) %>%
formatRound(fieldList, digits=2)
hchart(d, type = "bar", hcaes(x = d$short_name, y = d$chg_pct_1d))
hchart(d, type = "bar", hcaes(x = d$short_name, y = d$chg_pct_1d))
hchart(d, type = "bar", hcaes(x = d$short_name, y = d$chg_pct_5d))
hchart(d, type = "bar", hcaes(x = d$short_name, y = d$chg_pct_ytd))
devtools::install_github("ropensci/plotly")
install.packages("promises")
install.packages("shiny")
install.packages("shiny")
devtools::install_github("ropensci/plotly")
updateR()
library(installr)
install.packages("installr")
library(installr)
updateR()
R.Version()
install.packages("quantmod")
library(quantmod)
GetHistTS <- function(ticker = "", lookback = 2000, period = "DAILY")
{
fromDays <- lookback
opt <- c("periodicitySelection"=period)
histData <- bdh(ticker, c("PX_LAST","PX_OPEN", "PX_HIGH", "PX_LOW"), start.date=Sys.Date()- fromDays, options=opt)
tm <- strptime(paste(histData[,"date"]), format="%Y-%m-%d")
ts <- xts(x=histData[,c("PX_OPEN","PX_HIGH","PX_LOW","PX_LAST")],order.by=tm)
colnames(ts) <- c("Open","High","Low","Close")
return(ts)
}
GetStaticTSChart <- function(ts)
{
h <- chartSeries(ts, theme="white", name=ticker,
TA="addBBands();addRSI();addSMA(20, col='blue');addMACD();
addSMA(50, col='red');addSMA(100, col='black')")
return(h)
}
ticker = "SPX Index"
ts <- GetHistTS(ticker, lookback = 1000, period = "WEEKLY")
h <- GetStaticTSChart(ts)
View(ts)
chartSeries(ts$Close)
chartSeries(ts$Close, theme="white")
ticker = "SPX Index"
ts <- GetHistTS(ticker, lookback = 1000, period = "DAILY")
h <- GetStaticTSChart(ts)
ticker = "S5CONS Index"
ts_s5cons <- GetHistTS(ticker, lookback = 1000, period = "DAILY")
library(Rblpapi)
library(quantmod)
# init. BBG connection
con <- blpConnect()
GetHistTS <- function(ticker = "", lookback = 2000, period = "DAILY")
{
fromDays <- lookback
opt <- c("periodicitySelection"=period)
histData <- bdh(ticker, c("PX_LAST","PX_OPEN", "PX_HIGH", "PX_LOW"), start.date=Sys.Date()- fromDays, options=opt)
tm <- strptime(paste(histData[,"date"]), format="%Y-%m-%d")
ts <- xts(x=histData[,c("PX_OPEN","PX_HIGH","PX_LOW","PX_LAST")],order.by=tm)
colnames(ts) <- c("Open","High","Low","Close")
return(ts)
}
GetStaticTSChart <- function(ts)
{
h <- chartSeries(ts, theme="white", name=ticker,
TA="addBBands();addRSI();addSMA(20, col='blue');addMACD();
addSMA(50, col='red');addSMA(100, col='black')")
return(h)
}
ticker = "SPX Index"
ts <- GetHistTS(ticker, lookback = 1000, period = "DAILY")
h <- GetStaticTSChart(ts)
ticker = "S5CONS Index"
ts_s5cons <- GetHistTS(ticker, lookback = 1000, period = "DAILY")
chartSeries(ts$Close, theme="white")
add_TA(ts_s5cons)
add_TA(ts_s5cons, on = 1)
addTA(ts_s5cons)
addTA(ts_s5cons, on = 1)
chartSeries(ts$Close, theme="white")
addTA(ts_s5cons, on = 1)
addTA(ts_s5cons)
chartSeries(ts$Close/ts_s5cons$Close)
chartSeries(ts$Close/ts_s5cons$Close, theme = "white")
chartSeries(ts_s5cons$Close/ts$Close, theme = "white")
# Plot Time Series using historical data
ticker = "SPX Index"
ts <- GetHistTS(ticker, lookback = 1000, period = "DAILY")
h <- GetStaticTSChart(ts)
ticker = "S5CONS Index"
ts_s5cons <- GetHistTS(ticker, lookback = 1000, period = "DAILY")
ticker = "SOX Index"
ts_sox <- GetHistTS(ticker, lookback = 1000, period = "DAILY")
chartSeries(ts_s5cons$Close/ts$Close, theme = "white")
add_TA(ts_sox$Close)
add_TA(ts_sox$Close, om = 1)
add_TA(ts_sox$Close, on = 1)
add_TA(Cl(ts_sox$Close), on = 1)
chart_Series(ts_s5cons$Close/ts$Close, theme = "white")
chart_Series(ts_s5cons$Close/ts$Close, theme = "white")
chart_Series(Cl(ts_s5cons$Close/ts$Close), theme = "white")
chart_Series(Cl(ts_s5cons$Close/ts$Close), theme = "white")
chart_Series(Cl(ts_s5cons$Close/ts$Close), theme = "white")
chartSeries(ts_s5cons$Close/ts$Close, theme = "white")
chartSeries(Cl(ts_s5cons$Close/ts$Close), theme = "white")
chartSeries(ts_s5cons$Close/ts$Close, theme = "white")
addTA(ts_sox$Close/ts$Close)
addTA(ts_sox$Close/ts$Close, on = 1)
addTA(ts_sox$Close/ts$Close, on = 1)
chartSeries(ts_s5cons$Close/ts$Close, theme = "white")
addTA(ts_sox$Close/ts$Close, on = 1)
chartSeries(ts_s5cons$Close/ts$Close, theme = "white")
addTA(ts_sox$Close/ts$Close, on = 1, col = "red", lty = 3)
chartSeries(ts_s5cons$Close/ts$Close, theme = "white")
addTA(ts_sox$Close/ts$Close, on = NA, col = "red", lty = 3)
chartSeries(ts_s5cons$Close/ts$Close, theme = "white")
addTA(ts_sox$Close/ts$Close, on = 1, col = "red", lty = 3)
chartSeries(ts_s5cons$Close/ts$Close, theme = "white")
addTA(ts_sox$Close/ts$Close)
chartSeries(ts_s5cons$Close/ts$Close, theme = chart_theme())
addTA(ts_sox$Close/ts$Close)
chartSeries(ts_s5cons$Close/ts$Close, theme = chart_theme())
addTA(ts_sox$Close/ts$Close)
addLines(h=0.215, on = 1)
addLines(h=0.215, on = 1, lty = 2)
addLines(h=0.215, on = 1, line.type = "l")
View(ts_sox)
library(dygraphs)
install.packages("dygraphs")
library(dygraphs)
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyShading(from = "1920-1-1", to = "1930-1-1") %>%
dyShading(from = "1940-1-1", to = "1950-1-1")
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyShading(from = "48", to = "52", axis = "y") %>%
dyShading(from = "50", to = "50.1", axis = "y", color = "black")
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyShading(from = "48", to = "52", axis = "y") %>%
dyShading(from = "50", to = "50.1", axis = "y", color = "black")
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyShading(from = "48", to = "52", axis = "y") %>%
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyShading(from = "48", to = "52", axis = "y")
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyShading(from = "48", axis = "y")
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyShading(from = "48", to="999" axis = "y")
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyShading(from = "48", to="999", axis = "y")
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyShading(from = "51", to="999", axis = "y")
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyShading(from = "51", to="999", axis = "y") %>%
dyShading(from = "1930", to="1945")
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyShading(from = "51", to="999", axis = "y") %>%
dyShading(from = "1930-01-01", to="1945-01-01")
nhtemp
a<-nhtemp
a<-nhtemp<50
a
library(dygraphs)
lungDeaths <- cbind(mdeaths, fdeaths)
dygraph(lungDeaths)
View(lungDeaths)
View(lungDeaths)
View(lungDeaths)
lungDeaths['mdeaths']
lungDeaths[0]
lungDeaths[[0]]
lungDeaths[[1]]
install.packages("YieldCurve")
require(xts)
require(YieldCurve)
data(FedYieldCurve)
first(FedYieldCurve,'3 month')
last(FedYieldCurve,'3 month')
mat<-c(3/12, 0.5, 1,2,3,5,7,10)
par(mfrow=c(2,3))
for( i in c(1,2,3,370,371,372) ){
plot(mat, FedYieldCurve[i,], type="o", xlab="Maturities structure in years", ylab="Interest rates values")
title(main=paste("Federal Reserve yield curve obeserved at",time(FedYieldCurve[i], sep=" ") ))
grid()
}
View(ts)
View(ts_sox)
install.packages("gRbase")
library(gRbase)
g1 <- ug(~a:b:e + a:c:e + b:d:e + c:d:e + c:g + d:f)
class(g1)
install.packages("gRain")
setRepositories()
install.packages("gRbase", dependencies=TRUE);
install.packages("gRain", dependencies=TRUE);
install.packages("gRim", dependencies=TRUE)
setRepositories()
install.packages("gRbase", dependencies=TRUE);
setRepositories()
library(gRbase)
g1 <- ug(~a:b:e + a:c:e + b:d:e + c:d:e + c:g + d:f)
class(g1)
as(g1, "matrix")
library(gRbase)
library(Rgraphviz)
g1 <- ug(~a:b:e + a:c:e + b:d:e + c:d:e + c:g + d:f)
class(g1)
as(g1, "matrix")
plot(g1)
library(gRbase)
library(Rgraphviz)
library(gRain)
val=c(“true”,”false”)
F = cptable(~F, values=c(10,90),levels=val)
C = cptable(~C|F, values=c(10,90,20,80),levels=val)
E = cptable(~E|F, values=c(50,50,30,70),levels=val)
A = cptable(~A|C, values=c(50,50,70,30),levels=val)
D = cptable(~D|E, values=c(60,40,70,30),levels=val)
B = cptable(~B|A:D, values=c(60,40,70,30,20,80,10,90),levels=val)
val=c("true","false")
F = cptable(~F, values=c(10,90),levels=val)
C = cptable(~C|F, values=c(10,90,20,80),levels=val)
E = cptable(~E|F, values=c(50,50,30,70),levels=val)
A = cptable(~A|C, values=c(50,50,70,30),levels=val)
D = cptable(~D|E, values=c(60,40,70,30),levels=val)
B = cptable(~B|A:D, values=c(60,40,70,30,20,80,10,90),levels=val)
plist = compileCPT(list(F,E,C,A,D,B))
plist
print(plist$F)
print(plist$B)
jtree = grain(plist)
jtree
querygrain(jtree, nodes=c("F"), type="marginal")
querygrain(jtree, nodes=c("C"), type="marginal")
querygrain(jtree, nodes=c("B"), type="marginal")
querygrain(jtree, nodes=c("A","B"), type="joint")
querygrain(jtree, nodes=c("A","B","C"), type="joint")
jtree2 = setEvidence(jtree, evidence=list(F="true"))
querygrain(jtree, nodes=c("A"), type="marginal")
querygrain(jtree2, nodes=c("A"), type="marginal")
querygrain(jtree, nodes=c("A"), type="marginal")
querygrain(jtree2, nodes=c("A"), type="marginal")
querygrain(jtree, nodes=c("B"), type="marginal")
querygrain(jtree2, nodes=c("B"), type="marginal")
install.packages("bnlearn")
dag = model2network("[A][S][E|A:S][O|E][R|E][T|O:R]")
library("bnlearn")
dag = model2network("[A][S][E|A:S][O|E][R|E][T|O:R]")
plot(dag)
arc.set = matrix(c("A", "E",
+                    "S", "E",
+                    "E", "O",
+                    "E", "R",
+                    "O", "T",
+                    "R", "T"),
+             byrow = TRUE, ncol = 2,
+             dimnames = list(NULL, c("from", "to")))
arc.set = matrix(c("A", "E",
"S", "E",
"E", "O",
"E", "R",
"O", "T",
"R", "T"),
byrow = TRUE, ncol = 2,
dimnames = list(NULL, c("from", "to")))
plot(dag)
dag = empty.graph(c("A", "S", "E", "O", "R", "T"))
arcs(dag) = arc.set
dag = hc(data)
library("readxl")
library(Rblpapi)
library(TTR)
library(quantmod)
# set working directory
# setwd("~/MarketStudy/R/Blog")
setwd("C:/Users/jay/Documents/GitHub/JTest02/assets/Charts")
# bbg
con <- blpConnect()
# function
GetBBGData <- function(ticker, fields, days = 3650, interval = "DAILY"){
# Get Price Data
fromDays <- days
opt <- c("periodicitySelection"=interval, "nonTradingDayFillOption"="NON_TRADING_WEEKDAYS", "nonTradingDayFillMethod"="PREVIOUS_VALUE")
bbgData <- bdh(ticker, fields, start.date=Sys.Date()- fromDays, options=opt)
return(bbgData)
}
# Index and ETFs - Price/RSI/MACD
USIndexList <- c('SPX Index','CCMP Index', 'INDU Index', 'MID Index', 'RTY Index')
EUIndexList <- c('SX5E Index', 'SXXP Index', 'UKX Index')
AsiaIndex <- c('NKY Index', 'HSI Index', 'SHSZ300 Index', 'SHCOMP Index')
FXList <- c('AUDUSD Curncy', 'USDJPY Curncy', 'EURUSD Curncy', 'GBPUSD Curncy', 'USDCAD Curncy', 'USDCHF Curncy')
CmdList <- c('CL1 Comdty', 'CO1 Comdty', 'GC1 Comdty')
SectorList <- c('XLC US Equity', 'XLY US Equity', 'XLP US Equity', 'XLE US Equity', 'XLF US Equity', 'XLV US Equity', 'XLI US Equity', 'XLB US Equity', 'XLRE US Equity', 'XLK US Equity', 'XLU US Equity')
tickerList <- c(USIndexList, EUIndexList, AsiaIndex, FXList, CmdList, SectorList)
rawdata<-GetBBGData(tickerList, c('PX_OPEN','PX_HIGH', 'PX_LOW', 'PX_LAST'))
for (i in 1:length(tickerList)) {
t <- rawdata[[i]]
ts <- xts(t[,2:5], order.by = as.Date(t[,1]))
names(ts) <- c('Open','High','Low', 'Close')
png(paste(names(rawdata[i]), ".png", sep =""), units="px", width=800, height=600, res=100)
candleChart(ts, theme = 'white', name=names(rawdata[i]), subset='2020-01::', TA="addSMA(n=50, col = 'blue');addSMA(n=100, col = 'orange');addRSI();addMACD();addBBands()") # subset = 'last 6 months'
#addMACD(fast = 12, slow = 26, signal = 9)
#addSMA(n=50, col = 'blue')
#addSMA(n=100, col = 'orange')
#addRSI(n=14)
#addLines(h=c(30,70), on=3, col = 'red')
#addBBands(n=20,sd=2)
dev.off()
}
# Multiples
pe<-GetBBGData('SPX Index', 'PE_RATIO')
pe_ts <- xts(pe[,2], order.by = as.Date(pe[,1]))
png("SPX PE.png", units="px", width=800, height=600, res=100)
chartSeries(pe_ts, theme = 'white', name = 'S&P 500 PE', up.col = 'blue')
dev.off()
pb<-GetBBGData('SPX Index', 'PX_TO_BOOK_RATIO')
pb_ts <- xts(pb[,2], order.by = as.Date(pb[,1]))
png("SPX PB.png", units="px", width=800, height=600, res=100)
chartSeries(pb_ts, theme = 'white', name = 'S&P 500 PB', up.col = 'blue')
dev.off()
dvd<-GetBBGData('SPX Index', 'EQY_DVD_YLD_12M')
dvd_ts <- xts(dvd[,2], order.by = as.Date(dvd[,1]))
png("SPX DVD.png", units="px", width=800, height=600, res=100)
chartSeries(dvd_ts, theme = 'white', name = 'S&P 500 Dividend Yield', up.col = 'blue')
dev.off()
ev_sales<-GetBBGData('SPX Index', 'EV_TO_T12M_SALES')
ev_sales_ts <- xts(ev_sales[,2], order.by = as.Date(ev_sales[,1]))
png("SPX EVSALES.png", units="px", width=800, height=600, res=100)
chartSeries(ev_sales_ts, theme = 'white', name = 'S&P 500 EV/Sales', up.col = 'blue')
dev.off()
# Others
vix<-GetBBGData('VIX Index', 'px_last')
vix_ts <- xts(vix[,2], order.by = as.Date(vix[,1]))
png("VIX.png", units="px", width=800, height=600, res=100)
chartSeries(vix_ts, theme = 'white', name = 'VIX', up.col = 'blue')
dev.off()
library("readxl")
library(Rblpapi)
library(TTR)
library(quantmod)
# set working directory
# setwd("~/MarketStudy/R/Blog")
setwd("C:/Users/jay/Documents/GitHub/JTest02/assets/Charts")
# bbg
con <- blpConnect()
