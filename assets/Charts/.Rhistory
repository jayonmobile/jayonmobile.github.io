colnames(ts) <- c("Open","High","Low","Close")
return(ts)
}
GetStaticTSChart <- function(ts)
{
h <- chartSeries(ts, theme="white", name=ticker,
TA="addBBands();addRSI();addSMA(20, col='blue');addMACD();
addSMA(50, col='red');addSMA(100, col='black')")
return(h)
}
ticker = "SPX Index"
ts <- GetHistTS(ticker, lookback = 1000, period = "WEEKLY")
h <- GetStaticTSChart(ts)
ticker = "SPX Index"
ts <- GetHistTS(ticker, lookback = 360, period = "DAILY")
h <- GetStaticTSChart(ts)
# SPX Sector
tickerList <- c("S5INFT INDEX", "S5COND INDEX", "S5FINL INDEX", "S5HLTH INDEX", "S5INDU INDEX", "S5MATR INDEX", "S5CONS INDEX", "S5TELS INDEX", "S5ENRS INDEX", "S5RLST INDEX", "S5UTIL INDEX")
fieldList <- c("short_name", "PX_LAST", "chg_pct_1d", "chg_pct_5d", "chg_pct_1m", "chg_pct_3m", "chg_pct_ytd")
d <- bdp(tickerList, fieldList)
datatable(d, class = 'cell-border stripe', options = list(pageLength = 20)) %>%
formatRound(fieldList, digits=2)
# SPX Sector
tickerList <- c("S5INFT INDEX", "S5COND INDEX", "S5FINL INDEX", "S5HLTH INDEX", "S5INDU INDEX", "S5MATR INDEX", "S5CONS INDEX", "S5TELS INDEX", "S5ENRS INDEX", "S5RLST INDEX", "S5UTIL INDEX")
fieldList <- c("short_name", "PCT_MEMB_PX_GT_10D_MOV_AVG", "PCT_MEMB_PX_GT_50D_MOV_AVG", "PCT_MEMB_ABOVE_MOV_AVG_200D", "PCT_MEMB_WITH_14D_RSI_GT_70", "PCT_MEMB_WITH_14D_RSI_LT_30", "PCT_MEM_MACD_BUY_SIGNAL_LST_10D", "PCT_MEM_MACD_SL_SIGNAL_LST_10D")
d <- bdp(tickerList, fieldList)
datatable(d, class = 'cell-border stripe', options = list(pageLength = 20)) %>%
formatRound(fieldList, digits=2)
hchart(d, type = "bar", hcaes(x = d$short_name, y = d$chg_pct_1d))
# SPX Sector
tickerList <- c("S5INFT INDEX", "S5COND INDEX", "S5FINL INDEX", "S5HLTH INDEX", "S5INDU INDEX", "S5MATR INDEX", "S5CONS INDEX", "S5TELS INDEX", "S5ENRS INDEX", "S5RLST INDEX", "S5UTIL INDEX")
fieldList <- c("short_name", "PX_LAST", "chg_pct_1d", "chg_pct_5d", "chg_pct_1m", "chg_pct_3m", "chg_pct_ytd")
d <- bdp(tickerList, fieldList)
datatable(d, class = 'cell-border stripe', options = list(pageLength = 20)) %>%
formatRound(fieldList, digits=2)
# SPX Sector
tickerList <- c("S5INFT INDEX", "S5COND INDEX", "S5FINL INDEX", "S5HLTH INDEX", "S5INDU INDEX", "S5MATR INDEX", "S5CONS INDEX", "S5TELS INDEX", "S5ENRS INDEX", "S5RLST INDEX", "S5UTIL INDEX")
fieldList <- c("short_name", "PCT_MEMB_PX_GT_10D_MOV_AVG", "PCT_MEMB_PX_GT_50D_MOV_AVG", "PCT_MEMB_ABOVE_MOV_AVG_200D", "PCT_MEMB_WITH_14D_RSI_GT_70", "PCT_MEMB_WITH_14D_RSI_LT_30", "PCT_MEM_MACD_BUY_SIGNAL_LST_10D", "PCT_MEM_MACD_SL_SIGNAL_LST_10D")
b <- bdp(tickerList, fieldList)
datatable(b, class = 'cell-border stripe', options = list(pageLength = 20)) %>%
formatRound(fieldList, digits=2)
hchart(d, type = "bar", hcaes(x = d$short_name, y = d$chg_pct_1d))
hchart(d, type = "bar", hcaes(x = d$short_name, y = d$chg_pct_1d))
hchart(d, type = "bar", hcaes(x = d$short_name, y = d$chg_pct_5d))
hchart(d, type = "bar", hcaes(x = d$short_name, y = d$chg_pct_ytd))
devtools::install_github("ropensci/plotly")
install.packages("promises")
install.packages("shiny")
install.packages("shiny")
devtools::install_github("ropensci/plotly")
updateR()
library(installr)
install.packages("installr")
library(installr)
updateR()
R.Version()
install.packages("quantmod")
library(quantmod)
GetHistTS <- function(ticker = "", lookback = 2000, period = "DAILY")
{
fromDays <- lookback
opt <- c("periodicitySelection"=period)
histData <- bdh(ticker, c("PX_LAST","PX_OPEN", "PX_HIGH", "PX_LOW"), start.date=Sys.Date()- fromDays, options=opt)
tm <- strptime(paste(histData[,"date"]), format="%Y-%m-%d")
ts <- xts(x=histData[,c("PX_OPEN","PX_HIGH","PX_LOW","PX_LAST")],order.by=tm)
colnames(ts) <- c("Open","High","Low","Close")
return(ts)
}
GetStaticTSChart <- function(ts)
{
h <- chartSeries(ts, theme="white", name=ticker,
TA="addBBands();addRSI();addSMA(20, col='blue');addMACD();
addSMA(50, col='red');addSMA(100, col='black')")
return(h)
}
ticker = "SPX Index"
ts <- GetHistTS(ticker, lookback = 1000, period = "WEEKLY")
h <- GetStaticTSChart(ts)
View(ts)
chartSeries(ts$Close)
chartSeries(ts$Close, theme="white")
ticker = "SPX Index"
ts <- GetHistTS(ticker, lookback = 1000, period = "DAILY")
h <- GetStaticTSChart(ts)
ticker = "S5CONS Index"
ts_s5cons <- GetHistTS(ticker, lookback = 1000, period = "DAILY")
library(Rblpapi)
library(quantmod)
# init. BBG connection
con <- blpConnect()
GetHistTS <- function(ticker = "", lookback = 2000, period = "DAILY")
{
fromDays <- lookback
opt <- c("periodicitySelection"=period)
histData <- bdh(ticker, c("PX_LAST","PX_OPEN", "PX_HIGH", "PX_LOW"), start.date=Sys.Date()- fromDays, options=opt)
tm <- strptime(paste(histData[,"date"]), format="%Y-%m-%d")
ts <- xts(x=histData[,c("PX_OPEN","PX_HIGH","PX_LOW","PX_LAST")],order.by=tm)
colnames(ts) <- c("Open","High","Low","Close")
return(ts)
}
GetStaticTSChart <- function(ts)
{
h <- chartSeries(ts, theme="white", name=ticker,
TA="addBBands();addRSI();addSMA(20, col='blue');addMACD();
addSMA(50, col='red');addSMA(100, col='black')")
return(h)
}
ticker = "SPX Index"
ts <- GetHistTS(ticker, lookback = 1000, period = "DAILY")
h <- GetStaticTSChart(ts)
ticker = "S5CONS Index"
ts_s5cons <- GetHistTS(ticker, lookback = 1000, period = "DAILY")
chartSeries(ts$Close, theme="white")
add_TA(ts_s5cons)
add_TA(ts_s5cons, on = 1)
addTA(ts_s5cons)
addTA(ts_s5cons, on = 1)
chartSeries(ts$Close, theme="white")
addTA(ts_s5cons, on = 1)
addTA(ts_s5cons)
chartSeries(ts$Close/ts_s5cons$Close)
chartSeries(ts$Close/ts_s5cons$Close, theme = "white")
chartSeries(ts_s5cons$Close/ts$Close, theme = "white")
# Plot Time Series using historical data
ticker = "SPX Index"
ts <- GetHistTS(ticker, lookback = 1000, period = "DAILY")
h <- GetStaticTSChart(ts)
ticker = "S5CONS Index"
ts_s5cons <- GetHistTS(ticker, lookback = 1000, period = "DAILY")
ticker = "SOX Index"
ts_sox <- GetHistTS(ticker, lookback = 1000, period = "DAILY")
chartSeries(ts_s5cons$Close/ts$Close, theme = "white")
add_TA(ts_sox$Close)
add_TA(ts_sox$Close, om = 1)
add_TA(ts_sox$Close, on = 1)
add_TA(Cl(ts_sox$Close), on = 1)
chart_Series(ts_s5cons$Close/ts$Close, theme = "white")
chart_Series(ts_s5cons$Close/ts$Close, theme = "white")
chart_Series(Cl(ts_s5cons$Close/ts$Close), theme = "white")
chart_Series(Cl(ts_s5cons$Close/ts$Close), theme = "white")
chart_Series(Cl(ts_s5cons$Close/ts$Close), theme = "white")
chartSeries(ts_s5cons$Close/ts$Close, theme = "white")
chartSeries(Cl(ts_s5cons$Close/ts$Close), theme = "white")
chartSeries(ts_s5cons$Close/ts$Close, theme = "white")
addTA(ts_sox$Close/ts$Close)
addTA(ts_sox$Close/ts$Close, on = 1)
addTA(ts_sox$Close/ts$Close, on = 1)
chartSeries(ts_s5cons$Close/ts$Close, theme = "white")
addTA(ts_sox$Close/ts$Close, on = 1)
chartSeries(ts_s5cons$Close/ts$Close, theme = "white")
addTA(ts_sox$Close/ts$Close, on = 1, col = "red", lty = 3)
chartSeries(ts_s5cons$Close/ts$Close, theme = "white")
addTA(ts_sox$Close/ts$Close, on = NA, col = "red", lty = 3)
chartSeries(ts_s5cons$Close/ts$Close, theme = "white")
addTA(ts_sox$Close/ts$Close, on = 1, col = "red", lty = 3)
chartSeries(ts_s5cons$Close/ts$Close, theme = "white")
addTA(ts_sox$Close/ts$Close)
chartSeries(ts_s5cons$Close/ts$Close, theme = chart_theme())
addTA(ts_sox$Close/ts$Close)
chartSeries(ts_s5cons$Close/ts$Close, theme = chart_theme())
addTA(ts_sox$Close/ts$Close)
addLines(h=0.215, on = 1)
addLines(h=0.215, on = 1, lty = 2)
addLines(h=0.215, on = 1, line.type = "l")
View(ts_sox)
library(dygraphs)
install.packages("dygraphs")
library(dygraphs)
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyShading(from = "1920-1-1", to = "1930-1-1") %>%
dyShading(from = "1940-1-1", to = "1950-1-1")
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyShading(from = "48", to = "52", axis = "y") %>%
dyShading(from = "50", to = "50.1", axis = "y", color = "black")
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyShading(from = "48", to = "52", axis = "y") %>%
dyShading(from = "50", to = "50.1", axis = "y", color = "black")
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyShading(from = "48", to = "52", axis = "y") %>%
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyShading(from = "48", to = "52", axis = "y")
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyShading(from = "48", axis = "y")
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyShading(from = "48", to="999" axis = "y")
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyShading(from = "48", to="999", axis = "y")
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyShading(from = "51", to="999", axis = "y")
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyShading(from = "51", to="999", axis = "y") %>%
dyShading(from = "1930", to="1945")
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyShading(from = "51", to="999", axis = "y") %>%
dyShading(from = "1930-01-01", to="1945-01-01")
nhtemp
a<-nhtemp
a<-nhtemp<50
a
library(dygraphs)
lungDeaths <- cbind(mdeaths, fdeaths)
dygraph(lungDeaths)
View(lungDeaths)
View(lungDeaths)
View(lungDeaths)
lungDeaths['mdeaths']
lungDeaths[0]
lungDeaths[[0]]
lungDeaths[[1]]
install.packages("YieldCurve")
require(xts)
require(YieldCurve)
data(FedYieldCurve)
first(FedYieldCurve,'3 month')
last(FedYieldCurve,'3 month')
mat<-c(3/12, 0.5, 1,2,3,5,7,10)
par(mfrow=c(2,3))
for( i in c(1,2,3,370,371,372) ){
plot(mat, FedYieldCurve[i,], type="o", xlab="Maturities structure in years", ylab="Interest rates values")
title(main=paste("Federal Reserve yield curve obeserved at",time(FedYieldCurve[i], sep=" ") ))
grid()
}
View(ts)
View(ts_sox)
library("readxl")
library(Rblpapi)
library(TTR)
library(quantmod)
# set working directory
# setwd("~/MarketStudy/R/Blog")
setwd("C:/Users/jay/Documents/GitHub/JTest02/assets/Charts")
# bbg
con <- blpConnect()
library("readxl")
library(Rblpapi)
library(TTR)
library(quantmod)
# set working directory
# setwd("~/MarketStudy/R/Blog")
setwd("C:/Users/jay/Documents/GitHub/JTest02/assets/Charts")
# bbg
con <- blpConnect()
# function
GetBBGData <- function(ticker, fields, days = 3650, interval = "DAILY"){
# Get Price Data
fromDays <- days
opt <- c("periodicitySelection"=interval, "nonTradingDayFillOption"="NON_TRADING_WEEKDAYS", "nonTradingDayFillMethod"="PREVIOUS_VALUE")
bbgData <- bdh(ticker, fields, start.date=Sys.Date()- fromDays, options=opt)
return(bbgData)
}
# Index and ETFs - Price/RSI/MACD
USIndexList <- c('SPX Index','CCMP Index', 'INDU Index', 'MID Index', 'RTY Index')
EUIndexList <- c('SX5E Index', 'SXXP Index', 'UKX Index')
AsiaIndex <- c('NKY Index', 'HSI Index', 'SHSZ300 Index', 'SHCOMP Index')
FXList <- c('AUDUSD Curncy', 'USDJPY Curncy', 'EURUSD Curncy', 'GBPUSD Curncy', 'USDCAD Curncy', 'USDCHF Curncy')
CmdList <- c('CL1 Comdty', 'CO1 Comdty', 'GC1 Comdty')
SectorList <- c('XLC US Equity', 'XLY US Equity', 'XLP US Equity', 'XLE US Equity', 'XLF US Equity', 'XLV US Equity', 'XLI US Equity', 'XLB US Equity', 'XLRE US Equity', 'XLK US Equity', 'XLU US Equity')
tickerList <- c(USIndexList, EUIndexList, AsiaIndex, FXList, CmdList, SectorList)
rawdata<-GetBBGData(tickerList, c('PX_OPEN','PX_HIGH', 'PX_LOW', 'PX_LAST'))
for (i in 1:length(tickerList)) {
t <- rawdata[[i]]
ts <- xts(t[,2:5], order.by = as.Date(t[,1]))
names(ts) <- c('Open','High','Low', 'Close')
png(paste(names(rawdata[i]), ".png", sep =""), units="px", width=800, height=600, res=100)
candleChart(ts, theme = 'white', name=names(rawdata[i]), subset='2020-01::', TA="addSMA(n=50, col = 'blue');addSMA(n=100, col = 'orange');addRSI();addMACD();addBBands()") # subset = 'last 6 months'
#addMACD(fast = 12, slow = 26, signal = 9)
#addSMA(n=50, col = 'blue')
#addSMA(n=100, col = 'orange')
#addRSI(n=14)
#addLines(h=c(30,70), on=3, col = 'red')
#addBBands(n=20,sd=2)
dev.off()
}
# Multiples
pe<-GetBBGData('SPX Index', 'PE_RATIO')
pe_ts <- xts(pe[,2], order.by = as.Date(pe[,1]))
png("SPX PE.png", units="px", width=800, height=600, res=100)
chartSeries(pe_ts, theme = 'white', name = 'S&P 500 PE', up.col = 'blue')
dev.off()
pb<-GetBBGData('SPX Index', 'PX_TO_BOOK_RATIO')
pb_ts <- xts(pb[,2], order.by = as.Date(pb[,1]))
png("SPX PB.png", units="px", width=800, height=600, res=100)
chartSeries(pb_ts, theme = 'white', name = 'S&P 500 PB', up.col = 'blue')
dev.off()
dvd<-GetBBGData('SPX Index', 'EQY_DVD_YLD_12M')
dvd_ts <- xts(dvd[,2], order.by = as.Date(dvd[,1]))
png("SPX DVD.png", units="px", width=800, height=600, res=100)
chartSeries(dvd_ts, theme = 'white', name = 'S&P 500 Dividend Yield', up.col = 'blue')
dev.off()
ev_sales<-GetBBGData('SPX Index', 'EV_TO_T12M_SALES')
ev_sales_ts <- xts(ev_sales[,2], order.by = as.Date(ev_sales[,1]))
png("SPX EVSALES.png", units="px", width=800, height=600, res=100)
chartSeries(ev_sales_ts, theme = 'white', name = 'S&P 500 EV/Sales', up.col = 'blue')
dev.off()
# Others
vix<-GetBBGData('VIX Index', 'px_last')
vix_ts <- xts(vix[,2], order.by = as.Date(vix[,1]))
png("VIX.png", units="px", width=800, height=600, res=100)
chartSeries(vix_ts, theme = 'white', name = 'VIX', up.col = 'blue')
dev.off()
library("readxl")
library(Rblpapi)
library(TTR)
library(quantmod)
# set working directory
# setwd("~/MarketStudy/R/Blog")
setwd("C:/Users/jay/Documents/GitHub/JTest02/assets/Charts")
# bbg
con <- blpConnect()
library("readxl")
library(Rblpapi)
library(TTR)
library(quantmod)
# set working directory
# setwd("~/MarketStudy/R/Blog")
setwd("C:/Users/jay/Documents/GitHub/JTest02/assets/Charts")
# bbg
con <- blpConnect()
# function
GetBBGData <- function(ticker, fields, days = 3650, interval = "DAILY"){
# Get Price Data
fromDays <- days
opt <- c("periodicitySelection"=interval, "nonTradingDayFillOption"="NON_TRADING_WEEKDAYS", "nonTradingDayFillMethod"="PREVIOUS_VALUE")
bbgData <- bdh(ticker, fields, start.date=Sys.Date()- fromDays, options=opt)
return(bbgData)
}
# Index and ETFs - Price/RSI/MACD
USIndexList <- c('SPX Index','CCMP Index', 'INDU Index', 'MID Index', 'RTY Index')
EUIndexList <- c('SX5E Index', 'SXXP Index', 'UKX Index')
AsiaIndex <- c('NKY Index', 'HSI Index', 'SHSZ300 Index', 'SHCOMP Index')
FXList <- c('AUDUSD Curncy', 'USDJPY Curncy', 'EURUSD Curncy', 'GBPUSD Curncy', 'USDCAD Curncy', 'USDCHF Curncy')
CmdList <- c('CL1 Comdty', 'CO1 Comdty', 'GC1 Comdty')
SectorList <- c('XLC US Equity', 'XLY US Equity', 'XLP US Equity', 'XLE US Equity', 'XLF US Equity', 'XLV US Equity', 'XLI US Equity', 'XLB US Equity', 'XLRE US Equity', 'XLK US Equity', 'XLU US Equity')
tickerList <- c(USIndexList, EUIndexList, AsiaIndex, FXList, CmdList, SectorList)
rawdata<-GetBBGData(tickerList, c('PX_OPEN','PX_HIGH', 'PX_LOW', 'PX_LAST'))
for (i in 1:length(tickerList)) {
t <- rawdata[[i]]
ts <- xts(t[,2:5], order.by = as.Date(t[,1]))
names(ts) <- c('Open','High','Low', 'Close')
png(paste(names(rawdata[i]), ".png", sep =""), units="px", width=800, height=600, res=100)
candleChart(ts, theme = 'white', name=names(rawdata[i]), subset='2020-01::', TA="addSMA(n=50, col = 'blue');addSMA(n=100, col = 'orange');addRSI();addMACD();addBBands()") # subset = 'last 6 months'
#addMACD(fast = 12, slow = 26, signal = 9)
#addSMA(n=50, col = 'blue')
#addSMA(n=100, col = 'orange')
#addRSI(n=14)
#addLines(h=c(30,70), on=3, col = 'red')
#addBBands(n=20,sd=2)
dev.off()
}
# Multiples
pe<-GetBBGData('SPX Index', 'PE_RATIO')
pe_ts <- xts(pe[,2], order.by = as.Date(pe[,1]))
png("SPX PE.png", units="px", width=800, height=600, res=100)
chartSeries(pe_ts, theme = 'white', name = 'S&P 500 PE', up.col = 'blue')
dev.off()
pb<-GetBBGData('SPX Index', 'PX_TO_BOOK_RATIO')
pb_ts <- xts(pb[,2], order.by = as.Date(pb[,1]))
png("SPX PB.png", units="px", width=800, height=600, res=100)
chartSeries(pb_ts, theme = 'white', name = 'S&P 500 PB', up.col = 'blue')
dev.off()
dvd<-GetBBGData('SPX Index', 'EQY_DVD_YLD_12M')
dvd_ts <- xts(dvd[,2], order.by = as.Date(dvd[,1]))
png("SPX DVD.png", units="px", width=800, height=600, res=100)
chartSeries(dvd_ts, theme = 'white', name = 'S&P 500 Dividend Yield', up.col = 'blue')
dev.off()
ev_sales<-GetBBGData('SPX Index', 'EV_TO_T12M_SALES')
ev_sales_ts <- xts(ev_sales[,2], order.by = as.Date(ev_sales[,1]))
png("SPX EVSALES.png", units="px", width=800, height=600, res=100)
chartSeries(ev_sales_ts, theme = 'white', name = 'S&P 500 EV/Sales', up.col = 'blue')
dev.off()
# Others
vix<-GetBBGData('VIX Index', 'px_last')
vix_ts <- xts(vix[,2], order.by = as.Date(vix[,1]))
png("VIX.png", units="px", width=800, height=600, res=100)
chartSeries(vix_ts, theme = 'white', name = 'VIX', up.col = 'blue')
dev.off()
library("readxl")
library(Rblpapi)
library(TTR)
library(quantmod)
# set working directory
# setwd("~/MarketStudy/R/Blog")
setwd("C:/Users/jay/Documents/GitHub/JTest02/assets/Charts")
# bbg
con <- blpConnect()
# function
GetBBGData <- function(ticker, fields, days = 3650, interval = "DAILY"){
# Get Price Data
fromDays <- days
opt <- c("periodicitySelection"=interval, "nonTradingDayFillOption"="NON_TRADING_WEEKDAYS", "nonTradingDayFillMethod"="PREVIOUS_VALUE")
bbgData <- bdh(ticker, fields, start.date=Sys.Date()- fromDays, options=opt)
return(bbgData)
}
# Index and ETFs - Price/RSI/MACD
USIndexList <- c('SPX Index','CCMP Index', 'INDU Index', 'MID Index', 'RTY Index')
EUIndexList <- c('SX5E Index', 'SXXP Index', 'UKX Index')
AsiaIndex <- c('NKY Index', 'HSI Index', 'SHSZ300 Index', 'SHCOMP Index')
FXList <- c('AUDUSD Curncy', 'USDJPY Curncy', 'EURUSD Curncy', 'GBPUSD Curncy', 'USDCAD Curncy', 'USDCHF Curncy')
CmdList <- c('CL1 Comdty', 'CO1 Comdty', 'GC1 Comdty')
SectorList <- c('XLC US Equity', 'XLY US Equity', 'XLP US Equity', 'XLE US Equity', 'XLF US Equity', 'XLV US Equity', 'XLI US Equity', 'XLB US Equity', 'XLRE US Equity', 'XLK US Equity', 'XLU US Equity')
tickerList <- c(USIndexList, EUIndexList, AsiaIndex, FXList, CmdList, SectorList)
rawdata<-GetBBGData(tickerList, c('PX_OPEN','PX_HIGH', 'PX_LOW', 'PX_LAST'))
for (i in 1:length(tickerList)) {
t <- rawdata[[i]]
ts <- xts(t[,2:5], order.by = as.Date(t[,1]))
names(ts) <- c('Open','High','Low', 'Close')
png(paste(names(rawdata[i]), ".png", sep =""), units="px", width=800, height=600, res=100)
candleChart(ts, theme = 'white', name=names(rawdata[i]), subset='2020-01::', TA="addSMA(n=50, col = 'blue');addSMA(n=100, col = 'orange');addRSI();addMACD();addBBands()") # subset = 'last 6 months'
#addMACD(fast = 12, slow = 26, signal = 9)
#addSMA(n=50, col = 'blue')
#addSMA(n=100, col = 'orange')
#addRSI(n=14)
#addLines(h=c(30,70), on=3, col = 'red')
#addBBands(n=20,sd=2)
dev.off()
}
library(bnlearn)
dag = hc(learning.test)
fitted.bnlearn = bn.fit(dag, learning.test)
fitted.grain = as.grain(fitted.bnlearn)
fitted.grain
dag.gbn = hc(gaussian.test)
fitted.gbn = bn.fit(dag.gbn, gaussian.test)
as.grain(fitted.gbn)
fitted.sparse = bn.fit(dag, learning.test[1:10, ])
as.grain(fitted.sparse)
fitted.import = as.bn.fit(fitted.grain)
all.equal(fitted.bnlearn, fitted.import)
dag.import = as.bn(fitted.grain)
all.equal(dag, dag.import)
library(gRain)
fitted.with.evidence = setEvidence(fitted.grain, node = "B", state = "b")
as.bn.fit(fitted.with.evidence)$B
as.bn.fit(fitted.with.evidence, including.evidence = TRUE)$B
as.bn.fit(fitted.with.evidence, including.evidence = TRUE)
as.bn.fit(fitted.with.evidence, including.evidence = TRUE)$B
as.bn.fit(fitted.with.evidence, including.evidence = TRUE)$B
library(gRain)
# if there's a problem with RBGL package do
#  source("http://bioconductor.org/biocLite.R")
#  biocLite("RBGL")
# the possible values (all nodes are boolean vars)
yn <- c("yes","no")
# specify the CPTs
node.C <- cptable(~ C, values=c(1, 99), levels=yn)
node.T1 <- cptable(~ T1 + C, values=c(9,1,2,8), levels=yn)
node.T2 <- cptable(~ T2 + C, values=c(9,1,2,8), levels=yn)
# create an intermediate representation of the CPTs
plist <- compileCPT(list(node.C, node.T1, node.T2))
plist
library(gRain)
# if there's a problem with RBGL package do
#  source("http://bioconductor.org/biocLite.R")
#  biocLite("RBGL")
# the possible values (all nodes are boolean vars)
yn <- c("yes","no")
# specify the CPTs
node.C <- cptable(~ C, values=c(1, 99), levels=yn)
node.T1 <- cptable(~ T1 + C, values=c(9,1,2,8), levels=yn)
node.T2 <- cptable(~ T2 + C, values=c(9,1,2,8), levels=yn)
# create an intermediate representation of the CPTs
plist <- compileCPT(list(node.C, node.T1, node.T2))
plist
plist$C
plist$T1
library(gRain)
# if there's a problem with RBGL package do
#  source("http://bioconductor.org/biocLite.R")
#  biocLite("RBGL")
# the possible values (all nodes are boolean vars)
yn <- c("yes","no")
# specify the CPTs
node.C <- cptable(~ C, values=c(1, 99), levels=yn)
node.T1 <- cptable(~ T1 + C, values=c(9,1,2,8), levels=yn)
node.T2 <- cptable(~ T2 + C, values=c(9,1,2,8), levels=yn)
# create an intermediate representation of the CPTs
plist <- compileCPT(list(node.C, node.T1, node.T2))
plist
plist$C
plist$T1
# create network
bn.cancer <- grain(plist)
summary(bn.cancer)
# The marginal probability for each variable:
querygrain(bn.cancer, nodes=c("C", "T1", "T2"), type="marginal")
# The joint probability P(C,T1):
querygrain(bn.cancer, nodes=c("C","T1"), type="joint")
# P(T1=+ | T2=+):
#  1. add evidence to the net
bn.cancer.1 <- setFinding(bn.cancer, nodes=c("T2"), states=c("yes"))
#  2. query the new net
querygrain(bn.cancer.1, nodes=c("T1"))
# The probability of this evidence:
# print(getFinding(bn.cancer.1))
# The conditional P(not C | not T1)
bn.cancer.2 <- setFinding(bn.cancer, nodes=c("T1"), states=c("no"))
querygrain(bn.cancer.2, nodes=c("C"))
data("cad1")
head(cad1)
# create the DAG
dag.cad <- dag(~ CAD:Smoker:Inherit:Hyperchol +
AngPec:CAD +
Heartfail:CAD +
QWave:CAD)
library(Rgraphviz)
# source("http://bioconductor.org/biocLite.R")
# biocLite("Rgraphviz")
plot(dag.cad)
library(Rgraphviz)
plot(dag.cad)
biocLite("Rgraphviz")
plot(dag.cad)
